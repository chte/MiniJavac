PARSER_BEGIN(MiniJavaParser)

import java.io.*;

/**
 * Grammar to parse MiniJava language 
 * @author Christopher Teljstedt and Carl Eriksson 
 */
public class MiniJavaParser
{

public MiniJavaParser (String fileName){
	this(System.in);
    try { ReInit(new FileInputStream(new File(fileName))); }
    catch(Exception e) { e.printStackTrace(); }
}

public static void main(String args[]) {
	MiniJavaParser parser;
	if (args.length == 0) {
		System.out.println("MiniJavac 1.0:  Reading from standard input . . .");
		parser = new MiniJavaParser(System.in);
	} else if (args.length == 1) {
		System.out.println("MiniJavac 1.0:  Reading from file " + args[0] + " . . .");
		try {
			parser = new MiniJavaParser(new java.io.FileInputStream(args[0]));
		} catch (java.io.FileNotFoundException e) {
			System.out.println("MiniJavac 1.0: File " + args[0] + " not found.");
			return;
		}
	} else {
		System.out.println("MiniJavac 1.0:  Usage is one of:");
		System.out.println("         java JavaParser < inputfile");
		System.out.println("OR");
		System.out.println("         java JavaParser inputfile");
		return;
	}
	try {
		parser.CompilationUnit();
		System.out.println("MiniJavac 1.0: Java program parsed successfully.");
	} catch (ParseException e) {
		System.out.println(e.getMessage());
		System.out.println("MiniJavac 1.0: Encountered errors during parse.");
	}
}
}
PARSER_END(MiniJavaParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}



/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < BOOLEAN: "boolean" >
| < CLASS: "class" >
| < ELSE: "else" >
| < FALSE: "false" >
| < IF: "if" >
| < INT: "int" >
| < LONG: "long" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < THIS: "this" >
| < TRUE: "true" >
| < VOID: "void" >
| < WHILE: "while" >
| < LENGTH: "length" >
| < STRING: "String" >
| < MAIN: "main" >
| < SYSOUT_PRINTLN : "System.out.println" >
}

/* LITERALS */
/*	
	int lit := 0 | [1-9][0-9]*
	long lit := 0[lL] | [1-9][0-9]*[lL]	
*/

TOKEN :
{
  < INTEGER_LITERAL:
  	"0" | ["1"-"9"] (["0"-"9"])*
  >
}

/* IDENTIFIERS */

TOKEN :
{	//	id := [a-zA-Z ][a-zA-Z0-9 ]*
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [
      	 "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}



/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < NOT: "!" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
//| < EQ: "==" > /* Bonus 1p */
//| < LE: "<=" > /* Bonus 1p */
//| < GE: ">=" > /* Bonus 1p */
//| < NE: "!=" > /* Bonus 1p */
//| < SC_OR: "||" > /* Bonus 2p */
| < SC_AND: "&&" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
}



/**********************************************
 * THE MINI JAVA LANGUAGE GRAMMAR STARTS HERE *
 **********************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit():
{}
{
  MainDeclaration() ( ClassDeclaration() )*
  <EOF>
}
/*
 * Declaration syntax follows.
 */

void MainDeclaration():
{}
{
  <CLASS>
  <IDENTIFIER>
  MainBody()
}

void ClassDeclaration():
{}
{
  <CLASS>
  <IDENTIFIER>
  ClassBody()
}

void MainBody():
{}
{
  <LBRACE>
      <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET> <IDENTIFIER> <RPAREN>
      MainBlock() 
  <RBRACE>
}

void ClassBody():
{}
{
  <LBRACE>
      (LOOKAHEAD(2) VariableDeclaration() )* 
      ( MethodDeclaration() )* 
  <RBRACE>
}

void VariableDeclaration():
{}
{
  Type() <IDENTIFIER> <SEMICOLON>
}

void MethodDeclaration():
{}
{
  <PUBLIC>
  Type()
  MethodDeclarator()
  ClassBlock()
}

void MethodDeclarator():
{}
{
  <IDENTIFIER> FormalList()
}

void FormalList():
{}
{
  <LPAREN> [ FormalRest() ( "," FormalRest() )* ] <RPAREN>
}

void FormalRest():
{}
{
  Type() <IDENTIFIER>
}

/*
 * Type, name and expression syntax follows.
 */

void Type():
{}
{
   LOOKAHEAD(2) ReferenceType()
 |
   PrimitiveType()
 |
   <IDENTIFIER>
}

void ReferenceType():
{}
{
   PrimitiveTypeArray() ( LOOKAHEAD(2) <LBRACKET> <RBRACKET> )+
}


void PrimitiveTypeArray():
{}
{
  "int"
}

void PrimitiveType():
{}
{
  "boolean"
|
  "int"
}

void Operator():
{}
{
  <SC_AND>
|
  <LT>
|
  <PLUS>
|
  <MINUS>
|
  <STAR>
}

/*
 * Statement syntax follows.
 */

void Statement():
{}
{
  <LBRACE> ( Statement() )* <RBRACE>
|
  <IF> <LPAREN> Expression() <RPAREN> Statement() <ELSE> Statement()
|
  <WHILE> <LPAREN> Expression() <RPAREN> Statement()
|
  <SYSOUT_PRINTLN> <LPAREN> Expression() <RPAREN> <SEMICOLON>
|
  LOOKAHEAD(2)
  <IDENTIFIER> <ASSIGN> Expression() <SEMICOLON>
|
  LOOKAHEAD(2)
  <IDENTIFIER> <LBRACKET> Expression() <RBRACKET> <ASSIGN> Expression() <SEMICOLON> 
}

void MainBlock():
{}
{
  <LBRACE>
  ( LOOKAHEAD( Type() <IDENTIFIER> ) VariableDeclaration() )* 
  ( Statement() )* 
  <RBRACE>
}

void ClassBlock():
{}
{
  <LBRACE> 
    ( LOOKAHEAD( Type() <IDENTIFIER> ) 
    VariableDeclaration() )* 
    ( Statement() )*  
    ReturnStatement() 
  <RBRACE>
}

void WhileStatement():
{}
{
  <WHILE> <LPAREN> Expression() <RPAREN> Statement()
}

void ReturnStatement():
{}
{
  <RETURN> Expression() <SEMICOLON>
}

/*
 * Expression syntax follows.
 */

void Expression():
{}
{
  <INTEGER_LITERAL> ( LOOKAHEAD(2) ExpressionPrim() )*
  |
  <TRUE> ( LOOKAHEAD(2) ExpressionPrim() )*
  |
  <FALSE> ( LOOKAHEAD(2) ExpressionPrim() )*
  |
  <IDENTIFIER> ( LOOKAHEAD(2) ExpressionPrim() )*
  |
  <THIS> ( LOOKAHEAD(2) ExpressionPrim() )*
  |
  LOOKAHEAD(2)
  <NEW> <INT> <LBRACKET> Expression() <RBRACKET> ( LOOKAHEAD(2) ExpressionPrim() )*
  |
  LOOKAHEAD(2)
  <NEW> <IDENTIFIER> <LPAREN> <RPAREN> ( LOOKAHEAD(2) ExpressionPrim() )*
  |
  <NOT> Expression() ( LOOKAHEAD(2) ExpressionPrim() )*
  |
  <LPAREN> Expression() <RPAREN> ( LOOKAHEAD(2) ExpressionPrim() )*
}

void ExpressionPrim():
{}
{
  LOOKAHEAD(2)
  Operator() Expression()
  | 
  <LBRACKET> Expression() <RBRACKET> 
  |
  LOOKAHEAD(2)
  "." <LENGTH>
  |
  LOOKAHEAD(2)
  "." <IDENTIFIER> ExpressionList()
}

void ExpressionList():
/*
 * This expansion has been written with 3 lookahead,
 * can be performance issues, maybe try 2 lookahead. 
 */
{}
{
	<LPAREN> [ Expression() ( ExpressionRest() )* ] <RPAREN>
}

void ExpressionRest():
{}
{
	"," Expression()
}

void Literal():
{}
{
  <INTEGER_LITERAL>
|
  BooleanLiteral()
}

void BooleanLiteral():
{}
{
  <TRUE>
|
  <FALSE>
}
