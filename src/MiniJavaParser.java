/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
import java.io.*;

/**
 * Grammar to parse MiniJava language 
 * @author Christopher Teljstedt and Carl Eriksson 
 */
public class MiniJavaParser implements MiniJavaParserConstants {

public MiniJavaParser (String fileName){
        this(System.in);
    try { ReInit(new FileInputStream(new File(fileName))); }
    catch(Exception e) { e.printStackTrace(); }
}

public static void main(String args[]) {
        MiniJavaParser parser;
        if (args.length == 0) {
                System.out.println("MiniJavac 1.0:  Reading from standard input . . .");
                parser = new MiniJavaParser(System.in);
        } else if (args.length == 1) {
                System.out.println("MiniJavac 1.0:  Reading from file " + args[0] + " . . .");
                try {
                        parser = new MiniJavaParser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                        System.out.println("MiniJavac 1.0: File " + args[0] + " not found.");
                        return;
                }
        } else {
                System.out.println("MiniJavac 1.0:  Usage is one of:");
                System.out.println("         java JavaParser < inputfile");
                System.out.println("OR");
                System.out.println("         java JavaParser inputfile");
                return;
        }
        try {
                parser.CompilationUnit();
                System.out.println("MiniJavac 1.0: Java program parsed successfully.");
        } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("MiniJavac 1.0: Encountered errors during parse.");
        }
}

/**********************************************
 * THE MINI JAVA LANGUAGE GRAMMAR STARTS HERE *
 **********************************************/

/*
 * Program structuring syntax follows.
 */
  static final public void CompilationUnit() throws ParseException {
    trace_call("CompilationUnit");
    try {
      MainDeclaration();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ClassDeclaration();
      }
      jj_consume_token(0);
    } finally {
      trace_return("CompilationUnit");
    }
  }

/*
 * Declaration syntax follows.
 */
  static final public void MainDeclaration() throws ParseException {
    trace_call("MainDeclaration");
    try {
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      MainBody();
    } finally {
      trace_return("MainDeclaration");
    }
  }

  static final public void ClassDeclaration() throws ParseException {
    trace_call("ClassDeclaration");
    try {
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      ClassBody();
    } finally {
      trace_return("ClassDeclaration");
    }
  }

  static final public void MainBody() throws ParseException {
    trace_call("MainBody");
    try {
      jj_consume_token(LBRACE);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAREN);
      jj_consume_token(STRING);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAREN);
      MainBlock();
      jj_consume_token(RBRACE);
    } finally {
      trace_return("MainBody");
    }
  }

  static final public void ClassBody() throws ParseException {
    trace_call("ClassBody");
    try {
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        VariableDeclaration();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_3;
        }
        MethodDeclaration();
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("ClassBody");
    }
  }

  static final public void VariableDeclaration() throws ParseException {
    trace_call("VariableDeclaration");
    try {
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("VariableDeclaration");
    }
  }

  static final public void MethodDeclaration() throws ParseException {
    trace_call("MethodDeclaration");
    try {
      jj_consume_token(PUBLIC);
      Type();
      MethodDeclarator();
      ClassBlock();
    } finally {
      trace_return("MethodDeclaration");
    }
  }

  static final public void MethodDeclarator() throws ParseException {
    trace_call("MethodDeclarator");
    try {
      jj_consume_token(IDENTIFIER);
      FormalList();
    } finally {
      trace_return("MethodDeclarator");
    }
  }

  static final public void FormalList() throws ParseException {
    trace_call("FormalList");
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case IDENTIFIER:
        FormalRest();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          FormalRest();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } finally {
      trace_return("FormalList");
    }
  }

  static final public void FormalRest() throws ParseException {
    trace_call("FormalRest");
    try {
      Type();
      jj_consume_token(IDENTIFIER);
    } finally {
      trace_return("FormalRest");
    }
  }

/*
 * Type, name and expression syntax follows.
 */
  static final public void Type() throws ParseException {
    trace_call("Type");
    try {
      if (jj_2_2(2)) {
        ReferenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case INT:
          PrimitiveType();
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Type");
    }
  }

  static final public void ReferenceType() throws ParseException {
    trace_call("ReferenceType");
    try {
      PrimitiveTypeArray();
      label_5:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        if (jj_2_3(2)) {
          ;
        } else {
          break label_5;
        }
      }
    } finally {
      trace_return("ReferenceType");
    }
  }

  static final public void PrimitiveTypeArray() throws ParseException {
    trace_call("PrimitiveTypeArray");
    try {
      jj_consume_token(INT);
    } finally {
      trace_return("PrimitiveTypeArray");
    }
  }

  static final public void PrimitiveType() throws ParseException {
    trace_call("PrimitiveType");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PrimitiveType");
    }
  }

  static final public void ResultType() throws ParseException {
    trace_call("ResultType");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jj_consume_token(VOID);
        break;
      case BOOLEAN:
      case INT:
      case IDENTIFIER:
        Type();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ResultType");
    }
  }

/*
 * Statement syntax follows.
 */

// void AssignmentOperator():
// {}
// {
// 	"="
// }
  static final public void Operator() throws ParseException {
    trace_call("Operator");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        jj_consume_token(SC_AND);
        break;
      case LT:
        jj_consume_token(LT);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Operator");
    }
  }

/*
 * Statement syntax follows.
 */
  static final public void Statement() throws ParseException {
    trace_call("Statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case SYSOUT_PRINTLN:
          case IDENTIFIER:
          case LBRACE:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_6;
          }
          Statement();
        }
        jj_consume_token(RBRACE);
        break;
      case IF:
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Statement();
        jj_consume_token(ELSE);
        Statement();
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Statement();
        break;
      case SYSOUT_PRINTLN:
        jj_consume_token(SYSOUT_PRINTLN);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_4(2)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(ASSIGN);
          Expression();
          jj_consume_token(SEMICOLON);
        } else if (jj_2_5(2)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          jj_consume_token(ASSIGN);
          Expression();
          jj_consume_token(SEMICOLON);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Statement");
    }
  }

  static final public void MainBlock() throws ParseException {
    trace_call("MainBlock");
    try {
      jj_consume_token(LBRACE);
      label_7:
      while (true) {
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_7;
        }
        VariableDeclaration();
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case SYSOUT_PRINTLN:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("MainBlock");
    }
  }

  static final public void ClassBlock() throws ParseException {
    trace_call("ClassBlock");
    try {
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        if (jj_2_7(2147483647)) {
          ;
        } else {
          break label_9;
        }
        VariableDeclaration();
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case SYSOUT_PRINTLN:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_10;
        }
        Statement();
      }
      ReturnStatement();
      jj_consume_token(RBRACE);
    } finally {
      trace_return("ClassBlock");
    }
  }

// void IfStatement():

//  * The disambiguating algorithm of JavaCC automatically binds dangling
//  * else's to the innermost if statement.  The LOOKAHEAD specification
//  * is to tell JavaCC that we know what we are doing.

// {}
// {
//   <IF> <LPAREN> Expression() <RPAREN> Statement() [ LOOKAHEAD(1) <ELSE> Statement() ]
// }
  static final public void WhileStatement() throws ParseException {
    trace_call("WhileStatement");
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } finally {
      trace_return("WhileStatement");
    }
  }

  static final public void ReturnStatement() throws ParseException {
    trace_call("ReturnStatement");
    try {
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("ReturnStatement");
    }
  }

/*
 * Expression syntax follows.
 */
  static final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        label_11:
        while (true) {
          if (jj_2_8(2)) {
            ;
          } else {
            break label_11;
          }
          ExpressionPrim();
        }
        break;
      case TRUE:
        jj_consume_token(TRUE);
        label_12:
        while (true) {
          if (jj_2_9(2)) {
            ;
          } else {
            break label_12;
          }
          ExpressionPrim();
        }
        break;
      case FALSE:
        jj_consume_token(FALSE);
        label_13:
        while (true) {
          if (jj_2_10(2)) {
            ;
          } else {
            break label_13;
          }
          ExpressionPrim();
        }
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        label_14:
        while (true) {
          if (jj_2_11(2)) {
            ;
          } else {
            break label_14;
          }
          ExpressionPrim();
        }
        break;
      case THIS:
        jj_consume_token(THIS);
        label_15:
        while (true) {
          if (jj_2_12(2)) {
            ;
          } else {
            break label_15;
          }
          ExpressionPrim();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        if (jj_2_17(2)) {
          jj_consume_token(NEW);
          jj_consume_token(INT);
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          label_16:
          while (true) {
            if (jj_2_13(2)) {
              ;
            } else {
              break label_16;
            }
            ExpressionPrim();
          }
        } else if (jj_2_18(2)) {
          jj_consume_token(NEW);
          jj_consume_token(IDENTIFIER);
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
          label_17:
          while (true) {
            if (jj_2_14(2)) {
              ;
            } else {
              break label_17;
            }
            ExpressionPrim();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT:
            jj_consume_token(NOT);
            Expression();
            label_18:
            while (true) {
              if (jj_2_15(2)) {
                ;
              } else {
                break label_18;
              }
              ExpressionPrim();
            }
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            label_19:
            while (true) {
              if (jj_2_16(2)) {
                ;
              } else {
                break label_19;
              }
              ExpressionPrim();
            }
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("Expression");
    }
  }

  static final public void ExpressionPrim() throws ParseException {
    trace_call("ExpressionPrim");
    try {
      if (jj_2_19(2)) {
        Operator();
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          break;
        default:
          jj_la1[14] = jj_gen;
          if (jj_2_20(2)) {
            jj_consume_token(DOT);
            jj_consume_token(LENGTH);
          } else if (jj_2_21(2)) {
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            ExpressionList();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("ExpressionPrim");
    }
  }

// void PrefixExpression():
// /*
//  * This expansion has been written with 3 lookahead,
//  * can be performance issues, maybe try 2 lookahead. 
//  */
// {}
// {
//   <INTEGER_LITERAL>
//   |
//   <TRUE>
//   |
//   <FALSE>
//   |
//   <IDENTIFIER>
//   |
//   <THIS>
//   |
//   LOOKAHEAD(2)
//   <NEW> <INT> <LBRACKET> Expression() <RBRACKET> 
//   |
//   <NEW> <IDENTIFIER> <LPAREN> <RPAREN>
//   |
//   <NOT> Expression()
//   |
//   <LPAREN> Expression() <RPAREN>
// }

// void SuffixExpression():
// {}
// {
//     Operator() SuffixExpression()
// | 
//     <LBRACKET> SuffixExpression() <RBRACKET> 
// |
//     LOOKAHEAD(2)
//     "." <LENGTH>
// |
//     LOOKAHEAD(2)
//     "." <IDENTIFIER> ExpressionList()
// |
//     Expression()
// }
  static final public void ExpressionList() throws ParseException {
    trace_call("ExpressionList");
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NEW:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case NOT:
        Expression();
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_20;
          }
          ExpressionRest();
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } finally {
      trace_return("ExpressionList");
    }
  }

  static final public void ExpressionRest() throws ParseException {
    trace_call("ExpressionRest");
    try {
      jj_consume_token(COMMA);
      Expression();
    } finally {
      trace_return("ExpressionRest");
    }
  }

  static final public void Literal() throws ParseException {
    trace_call("Literal");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FALSE:
      case TRUE:
        BooleanLiteral();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Literal");
    }
  }

  static final public void BooleanLiteral() throws ParseException {
    trace_call("BooleanLiteral");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("BooleanLiteral");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(11)) return true;
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x4000,0x0,0x4000840,0x4000840,0x840,0x4080840,0x0,0x85100400,0x81100400,0x85100400,0x85100400,0x6060200,0x20000000,0x0,0x0,0x26062200,0x2040200,0x40200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x1f00,0x0,0x0,0x0,0x0,0x0,0x40,0x2,0x10,0x40,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[21];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 21; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
