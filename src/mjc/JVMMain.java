/* Generated By:JavaCC: Do not edit this line. JVMMain.java */
package mjc;

import java.io.*;
import syntaxtree.*;
import symboltree.*;
import visitor.*;

import java.math.BigInteger;
import java.util.ArrayList;
import java.io.PrintStream;
import java.io.File;

/**
 * Grammar to parse MiniJava language 
 * @author Christopher Teljstedt and Carl Eriksson 
 */
public class JVMMain implements JVMMainConstants {

public final static boolean VERBOSE = true;

public JVMMain (String fileName){
        this(System.in);
    try { ReInit(new FileInputStream(new File(fileName))); }
    catch(Exception e) { e.printStackTrace(); }
}

public static void main(String args[]) {
        JVMMain parser = null;
  Program program;
  SyntaxTreePrinter stp;
  SymbolTableBuilderVisitor stb;
  TypeDepthFirstVisitor tdfv;

        if (args.length == 0) {
                System.out.println("MiniJavac 1.0:  Reading from standard input . . .");
                parser = new JVMMain(System.in);
        }
  else if (args.length == 1) {
                System.out.println("MiniJavac 1.0:  Reading from file " + args[0] + " . . .");
                try {
                        parser = new JVMMain(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                        System.out.println("MiniJavac 1.0: File " + args[0] + " not found.");
                        System.exit(1);
                }
  }
  else if (args.length == 2){
    System.out.println("MiniJavac 1.0:  Reading from file " + args[0] + " . . .");
    try {
      parser = new JVMMain(new java.io.FileInputStream(args[0]));
    } catch (java.io.FileNotFoundException e) {
      System.out.println("MiniJavac 1.0: File " + args[0] + " not found.");
      System.exit(1);
    }
        }
  else {
                System.out.println("MiniJavac 1.0:  Usage is one of:");
                System.out.println("         java JavaParser < inputfile");
                System.out.println("OR");
                System.out.println("         java JavaParser inputfile");
                System.exit(0);
        }
        try {
                program = parser.Program();


    // VERBOSE: Print abstract syntax tree 
    if(VERBOSE) {
      stp = new SyntaxTreePrinter(System.out);
      stp.visit(program);
      System.out.println();
    }

    //Symbol table
    stb = new SymbolTableBuilderVisitor();
    stb.visit(program);

    // VERBOSE: Output symbol table
    if(VERBOSE) {
      Table st = stb.scopeLookupTable.get(program);
      System.out.println(st.toString(0));
    }

    //Type checking.
    tdfv = new TypeDepthFirstVisitor();
    tdfv.scopeLookupTable = stb.scopeLookupTable;
    tdfv.visit(program);

    for(String className : stb.classes){
      new File(className+".j").createNewFile();
    }

    if(tdfv.error != null || stb.error != null){
        System.exit(1);
    }
                System.out.println("MiniJavac 1.0: Java program parsed successfully.");
        } catch (Exception e) {
                System.out.println(e.getMessage());
                System.out.println("MiniJavac 1.0: Encountered errors during parse.");
    System.exit(1);
        }
  System.exit(0);
}

/**********************************************
 * THE MINI JAVA LANGUAGE GRAMMAR STARTS HERE *
 **********************************************/
/*
 * Program structuring syntax follows.
 */

/* Top level production */
  static final public Program Program() throws ParseException {
  MainClass mc; ClassDeclList cdl;
    /* The first class must be the main class */
      mc = MainClass();
    /* Then zero or more other class declarations */
      cdl = ClassDeclList();
    jj_consume_token(0);
    {if (true) return new Program(mc, cdl);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclList ClassDeclList() throws ParseException {
  ClassDecl c; ClassDeclList cdl = new ClassDeclList();
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      c = ClassDecl();
        cdl.addElement(c);
    }
    {if (true) return cdl;}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
  Token t; Identifier id1, id2; VarDecl v; Statement stmt; VarDeclList vdl = new VarDeclList(); StatementList sl = new StatementList();
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
                     id1 = new Identifier(t.image);
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    t = jj_consume_token(IDENTIFIER);
                                                                                                           id2 = new Identifier(t.image);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_2;
      }
      v = VarDecl();
                                                         vdl.addElement(v);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SYSOUT_PRINTLN:
      case LBRACE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_3;
      }
      stmt = Stmt();
                        sl.addElement(stmt);
    }
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
    {if (true) return new MainClass(id1, id2, vdl, sl);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclExtends ClassDeclExtends() throws ParseException {
  Token t; Identifier id, ide; VarDecl v; MethodDecl m; VarDeclList vl = new VarDeclList(); MethodDeclList ml = new MethodDeclList();
  ClassDeclSimple cd = null;
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
                             id = new Identifier(t.image);
    jj_consume_token(EXTENDS);
    t = jj_consume_token(IDENTIFIER);
                                                                                          ide = new Identifier(t.image);
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_4;
      }
      v = VarDecl();
                                     vl.addElement(v);
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_5;
      }
      m = MethodDecl();
                                                                                 ml.addElement(m);
    }
    jj_consume_token(RBRACE);
    {if (true) return new ClassDeclExtends(id, ide, vl, ml);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclSimple ClassDecl() throws ParseException {
  Token t; Identifier id, ide; VarDecl v; MethodDecl m; VarDeclList vl = new VarDeclList(); MethodDeclList ml = new MethodDeclList();
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
                             id = new Identifier(t.image);
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_6;
      }
      v = VarDecl();
                                     vl.addElement(v);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_7;
      }
      m = MethodDecl();
                                                                                 ml.addElement(m);
    }
    jj_consume_token(RBRACE);
    {if (true) return new ClassDeclSimple(id, vl, ml);}
    throw new Error("Missing return statement in function");
  }

/* Variable declaration */
  static final public VarDecl VarDecl() throws ParseException {
  Token t; Type type; Identifier id;
    type = Type();
    t = jj_consume_token(IDENTIFIER);
                                 id=new Identifier(t.image);
    jj_consume_token(SEMICOLON);
                                                                              {if (true) return new VarDecl(type, id);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDecl() throws ParseException {
  Exp e; Token t; Type type; Identifier id;  VarDecl v; Statement s; FormalList fl = new FormalList(); VarDeclList vl = new VarDeclList(); StatementList sl = new StatementList();
    jj_consume_token(PUBLIC);
    type = Type();
    t = jj_consume_token(IDENTIFIER);
                                              id = new Identifier(t.image);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case IDENTIFIER:
      fl = FormalList();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_8:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_8;
      }
      v = VarDecl();
                                   vl.addElement(v);
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SYSOUT_PRINTLN:
      case LBRACE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_9;
      }
      s = Stmt();
                   sl.addElement(s);
    }
    jj_consume_token(RETURN);
    e = Exp();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
    {if (true) return new MethodDecl(type, id, fl, vl, sl, e);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList FormalList() throws ParseException {
  Token t; Type type; Identifier id; Formal f; FormalList fl = new FormalList();
    type = Type();
    t = jj_consume_token(IDENTIFIER);
                               id=new Identifier(t.image);
                                                               f = new Formal(type, id); fl.addElement(f);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_10;
      }
      f = FormalRest();
                                                                                                                                fl.addElement(f);
    }
    {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  static final public Formal FormalRest() throws ParseException {
  Token t; Type type; Identifier id;
    jj_consume_token(COMMA);
    type = Type();
    t = jj_consume_token(IDENTIFIER);
                                         id=new Identifier(t.image);
                                                                           {if (true) return new Formal(type, id);}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  static final public Type Type() throws ParseException {
  Token t; Type type;
    if (jj_2_6(2)) {
      jj_consume_token(INT);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                    type=new IntArrayType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
              type=new IntegerType();
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
                  type=new BooleanType();
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                       type=new IdentifierType(t.image);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

/*
 * Stmt syntax follows.
 */
  static final public Statement Stmt() throws ParseException {
  Token t; Exp e1, e2; Identifier id; Statement rs, s1, s2; StatementList sl = new StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case SYSOUT_PRINTLN:
        case LBRACE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_11;
        }
        s1 = Stmt();
                             sl.addElement(s1);
      }
      jj_consume_token(RBRACE);
                                                                rs = new Block(sl);
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      e1 = Exp();
      jj_consume_token(RPAREN);
      s1 = Stmt();
      jj_consume_token(ELSE);
      s2 = Stmt();
                                                                   rs = new IfElse(e1, s1, s2);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      e1 = Exp();
      jj_consume_token(RPAREN);
      s1 = Stmt();
                                                     rs = new While(e1, s1);
      break;
    case SYSOUT_PRINTLN:
      jj_consume_token(SYSOUT_PRINTLN);
      jj_consume_token(LPAREN);
      e1 = Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
                                                                 rs = new Print(e1);
      break;
    default:
      jj_la1[8] = jj_gen;
      if (jj_2_7(2)) {
        t = jj_consume_token(IDENTIFIER);
                         id = new Identifier(t.image);
        jj_consume_token(ASSIGN);
        e1 = Exp();
        jj_consume_token(SEMICOLON);
                                                                                          rs = new Assign(id,e1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                         id = new Identifier(t.image);
          jj_consume_token(LBRACKET);
          e1 = Exp();
          jj_consume_token(RBRACKET);
          jj_consume_token(ASSIGN);
          e2 = Exp();
          jj_consume_token(SEMICOLON);
                                                                                                                        rs = new ArrayAssign(id,e1,e2);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

/*
 * Exp syntax follows.
 */
  static final public Exp Exp() throws ParseException {
  Exp e1, e2;
    e1 = RelExp();
    if (jj_2_8(2)) {
      jj_consume_token(SC_AND);
      e2 = Exp();
                                                    {if (true) return new Or(e1, e2);}
    } else {
      ;
    }
                                                                                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp RelExp() throws ParseException {
  Exp e1, e2;
    e1 = AddExp();
    if (jj_2_9(2)) {
      jj_consume_token(LT);
      e2 = RelExp();
                                                   {if (true) return new LessThan(e1, e2);}
    } else {
      ;
    }
                                                                                     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AddExp() throws ParseException {
  Exp e1, e2;
    e1 = MultExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      if (jj_2_10(2)) {
        jj_consume_token(PLUS);
        e2 = AddExp();
                             {if (true) return new Plus(e1, e2);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          jj_consume_token(MINUS);
          e2 = AddExp();
                              {if (true) return new Minus(e1, e2);}
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp MultExp() throws ParseException {
  Exp e1, e2;
    e1 = PrimaryExp();
    if (jj_2_11(2)) {
      jj_consume_token(STAR);
      e2 = MultExp();
                                                          {if (true) return new Times(e1, e2);}
    } else {
      ;
    }
                                                                                         {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp PrimaryExp() throws ParseException {
  Token t; Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                               e = new IntegerLiteral(Integer.parseInt(t.image));
      break;
    case TRUE:
      jj_consume_token(TRUE);
                e = new True();
      break;
    case FALSE:
      jj_consume_token(FALSE);
                e = new False();
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                          e = new IdentifierExp(t.image);
      break;
    case THIS:
      jj_consume_token(THIS);
               e = new This();
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_12(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(LBRACKET);
        e = Exp();
                                         e = new NewIntArray(e);
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          t = jj_consume_token(IDENTIFIER);
                                 e = new NewObject(new Identifier(t.image));
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
          break;
        case NOT:
          jj_consume_token(NOT);
          e = Exp();
                          e = new Not(e);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          e = Exp();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    label_12:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_12;
      }
      e = ExpPrim(e);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExpPrim(Exp e1) throws ParseException {
  Token t; Exp e2; Identifier id; ExpList el;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      e2 = Exp();
      jj_consume_token(RBRACKET);
                                     {if (true) return new ArrayLookup(e1, e2);}
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_14(2)) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
                     {if (true) return new ArrayLength(e1);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          t = jj_consume_token(IDENTIFIER);
                              id = new Identifier(t.image);
          jj_consume_token(LPAREN);
          el = ExpList();
          jj_consume_token(RPAREN);
                                                                                                 {if (true) return new Call(e1, id, el);}
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpList() throws ParseException {
  Exp e; ExpList el = new ExpList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case THIS:
    case TRUE:
    case LPAREN:
    case NOT:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      e = Exp();
                    el.addElement(e);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_13;
        }
        e = ExpRest();
                                                        el.addElement(e);
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExpRest() throws ParseException {
  Exp e;
    jj_consume_token(COMMA);
    e = Exp();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JVMMainTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x9100400,0x4000,0x4000,0x840,0x9100400,0x0,0x840,0x9100400,0x9100400,0x0,0x0,0x0,0x60200,0x2002000,0x20000000,0x0,0x0,0x2062200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x0,0x0,0x10,0x10,0x1,0x10,0x10,0x0,0x10,0x200,0x300,0x18,0x4,0x0,0x2,0x1,0x1c,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[14];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JVMMain(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JVMMain(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JVMMainTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JVMMain(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JVMMainTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JVMMain(JVMMainTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JVMMainTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
