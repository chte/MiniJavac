/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
import java.io.*;

/**
 * Grammar to parse MiniJava language 
 * @author Christopher Teljstedt and Carl Eriksson 
 */
public class MiniJavaParser implements MiniJavaParserConstants {

public MiniJavaParser (String fileName){
        this(System.in);
    try { ReInit(new FileInputStream(new File(fileName))); }
    catch(Exception e) { e.printStackTrace(); }
}

public static void main(String args[]) {
        MiniJavaParser parser;
        if (args.length == 0) {
                System.out.println("MiniJavac 1.0:  Reading from standard input . . .");
                parser = new MiniJavaParser(System.in);
        } else if (args.length == 1) {
                System.out.println("MiniJavac 1.0:  Reading from file " + args[0] + " . . .");
                try {
                        parser = new MiniJavaParser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                        System.out.println("MiniJavac 1.0: File " + args[0] + " not found.");
                        return;
                }
        } else {
                System.out.println("MiniJavac 1.0:  Usage is one of:");
                System.out.println("         java JavaParser < inputfile");
                System.out.println("OR");
                System.out.println("         java JavaParser inputfile");
                return;
        }
        try {
                parser.CompilationUnit();
                System.out.println("MiniJavac 1.0: Java program parsed successfully.");
        } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("MiniJavac 1.0: Encountered errors during parse.");
        }
}

/**********************************************
 * THE MINI JAVA LANGUAGE GRAMMAR STARTS HERE *
 **********************************************/

/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit() throws ParseException {
    MainDeclaration();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case SEMICOLON:
        ;
        break;
      default:
        break label_1;
      }
      ClassDeclaration();
    }
    jj_consume_token(0);
  }

/*
 * Declaration syntax follows.
 */
  final public void MainDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case CLASS:
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      MainBody();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case CLASS:
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      ClassBody();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MainBody() throws ParseException {
    jj_consume_token(LBRACE);
    MainBodyDeclaration();
    jj_consume_token(RBRACE);
  }

  final public void MainBodyDeclaration() throws ParseException {
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(43);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(RPAREN);
    MainBlock();
  }

  final public void ClassBody() throws ParseException {
    jj_consume_token(LBRACE);
    ClassBodyDeclaration();
    jj_consume_token(RBRACE);
  }

  final public void ClassBodyDeclaration() throws ParseException {
    if (jj_2_1(2147483647)) {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case INT:
          ;
          break;
        default:
          break label_2;
        }
        VariableDeclaration();
      }
    } else {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          break label_3;
        }
        MethodDeclaration();
      }
    }
  }

  final public void VariableDeclaration() throws ParseException {
    Type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
  }

  final public void MethodDeclaration(int modifiers) throws ParseException {
    jj_consume_token(PUBLIC);
    Type();
    MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ClassBlock();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MethodDeclarator() throws ParseException {
    jj_consume_token(IDENTIFIER);
    FormalList();
  }

  final public void FormalList() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
      FormalRest();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_4;
        }
        jj_consume_token(COMMA);
        FormalRest();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void FormalRest() throws ParseException {
    Type();
    jj_consume_token(IDENTIFIER);
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type() throws ParseException {
    if (jj_2_2(2)) {
      ReferenceType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
        PrimitiveType();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ReferenceType() throws ParseException {
    PrimitiveTypeArray();
    label_5:
    while (true) {
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      if (jj_2_3(2)) {
        ;
      } else {
        break label_5;
      }
    }
  }

  final public void PrimitiveTypeArray() throws ParseException {
    jj_consume_token(INT);
  }

  final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case BOOLEAN:
    case INT:
      Type();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 * Statement syntax follows.
 */
  final public void AssignmentOperator() throws ParseException {
    jj_consume_token(ASSIGN);
  }

  final public void Operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SC_AND:
      ConditionalAndExpression();
      break;
    case LT:
      RelationalExpression();
      break;
    case PLUS:
    case MINUS:
      UnaryExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    jj_consume_token(SC_AND);
  }

  final public void RelationalExpression() throws ParseException {
    jj_consume_token(LT);
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// void EqualityExpression():
// {}
// {
//   "==" 
// | 
//   "!=" 
// }



/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case SYSOUT_PRINTLN:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          break label_6;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
      break;
    case IF:
      IfStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case SYSOUT_PRINTLN:
      jj_consume_token(SYSOUT_PRINTLN);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
      break;
    default:
      if (jj_2_4(2)) {
        jj_consume_token(IDENTIFIER);
        AssignmentOperator();
        Expression();
        jj_consume_token(SEMICOLON);
      } else if (jj_2_5(2)) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        AssignmentOperator();
        Expression();
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MainBlock() throws ParseException {
    jj_consume_token(LBRACE);
    label_7:
    while (true) {
      if (jj_2_6(2147483647)) {
        ;
      } else {
        break label_7;
      }
      VariableDeclaration();
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SYSOUT_PRINTLN:
      case IDENTIFIER:
      case LBRACE:
        ;
        break;
      default:
        break label_8;
      }
      Statement();
    }
    jj_consume_token(RBRACE);
  }

  final public void ClassBlock() throws ParseException {
    jj_consume_token(LBRACE);
    label_9:
    while (true) {
      if (jj_2_7(2147483647)) {
        ;
      } else {
        break label_9;
      }
      VariableDeclaration();
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SYSOUT_PRINTLN:
      case IDENTIFIER:
      case LBRACE:
        ;
        break;
      default:
        break label_10;
      }
      Statement();
    }
    ReturnStatement();
    jj_consume_token(RBRACE);
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statement();
      break;
    default:
      ;
    }
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    Expression();
    jj_consume_token(SEMICOLON);
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
    if (jj_2_8(3)) {
      Operator();
      Expression();
    } else if (jj_2_9(2)) {
      jj_consume_token(LBRACKET);
      Expression();
      jj_consume_token(RBRACKET);
    } else if (jj_2_10(3)) {
      jj_consume_token(DOT);
      jj_consume_token(LENGTH);
    } else if (jj_2_11(3)) {
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      ExpressionList();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
        Literal();
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case THIS:
        jj_consume_token(THIS);
        break;
      default:
        if (jj_2_12(2)) {
          jj_consume_token(NEW);
          jj_consume_token(INT);
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
        } else if (jj_2_13(2)) {
          jj_consume_token(NEW);
          jj_consume_token(IDENTIFIER);
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 44:
            jj_consume_token(44);
            Expression();
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void ExpressionList() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACKET:
    case DOT:
    case LT:
    case SC_AND:
    case PLUS:
    case MINUS:
    case 44:
      Expression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_11;
        }
        ExpressionRest();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ExpressionRest() throws ParseException {
    jj_consume_token(COMMA);
    Expression();
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_14()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(11)) return true;
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_22()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniJavaParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
